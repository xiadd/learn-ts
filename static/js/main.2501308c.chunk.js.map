{"version":3,"sources":["assets/uncheck_icon.svg","assets/check_icon.svg","pages/TodoList/index.tsx","App.tsx","reportWebVitals.ts","models/index.ts","models/count.ts","store.ts","index.tsx","pages/TodoList/index.module.css"],"names":["TodoItem","todo","onToggle","className","cx","styles","todo_item","todo_item_checked","done","onClick","role","check_icon","src","checkedIcon","unCheckedIcon","alt","todo_item_text","text","TodoList","useState","id","todos","setTodos","value","setValue","toggleTodo","wrapper","todo_wrapper","todo_input","placeholder","onChange","evt","target","onKeyPress","key","Date","now","push","map","complete_all","complete_all_btn","newTodos","t","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","models","count","createModel","state","reducers","increment","payload","effects","dispatch","incrementAsync","console","log","Promise","resolve","setTimeout","store","init","redux","devtoolOptions","disabled","process","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2501308c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/uncheck_icon.c9d8c882.svg\";","export default __webpack_public_path__ + \"static/media/check_icon.08c72377.svg\";","import React, { useState } from 'react'\nimport cx from 'classnames'\nimport unCheckedIcon from '../../assets/uncheck_icon.svg'\nimport checkedIcon from '../../assets/check_icon.svg'\nimport styles from './index.module.css'\n\ntype Todo = {\n  id: number,\n  text: string,\n  done: boolean\n}\n\ninterface TodoItemProps {\n  todo: Todo,\n  onToggle: (todo: Todo) => void\n}\n\nfunction TodoItem({ todo, onToggle }: TodoItemProps) {\n  return (\n    <div className={cx(styles.todo_item, { [styles.todo_item_checked]: todo.done })} onClick={() => onToggle(todo)}>\n      <span role=\"button\" className={styles.check_icon}>\n        <img src={todo.done ? checkedIcon : unCheckedIcon} alt=\"icon\" />\n      </span>\n      <span className={styles.todo_item_text}>{todo.text}</span>\n    </div>\n  )\n}\n\nexport default function TodoList() {\n  const inititalTodos: Todo[] = [\n    { id: 1, text: 'First todo', done: true },\n    { id: 2, text: 'Second todo', done: false }\n  ]\n  const [todos, setTodos] = useState(inititalTodos)\n  const [value, setValue] = useState<string>('')\n  const toggleTodo = (todo: Todo): void => {\n    todo.done = !todo.done\n    setTodos([ ...todos ])\n  }\n  const compeleteAll = () => {\n    const newTodos: Todo[] = todos.map(t => ({\n      ...t,\n      done: true\n    }))\n    setTodos(newTodos)\n  }\n  const addTodo = (todo: Todo) => {\n    todos.push(todo)\n    setTodos([...todos])\n  }\n  const confirmAdd = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter' && value) {\n      addTodo({ id: Date.now(), text: value, done: false })\n      setValue('')\n    }\n  }\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.todo_wrapper}>\n        <div className={styles.todo_input}>\n          <input\n            placeholder=\"What needs to be done?\"\n            value={value}\n            onChange={evt => setValue(evt.target.value)}\n            onKeyPress={confirmAdd}\n          />\n        </div>\n        {todos.map(todo => (\n          <TodoItem key={todo.id} todo={todo} onToggle={toggleTodo} />\n        ))}\n        <div className={styles.complete_all}>\n          <span role=\"button\" className={styles.complete_all_btn} onClick={compeleteAll}>\n            Complete all\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport TodoList from './pages/TodoList'\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <TodoList />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { Models } from '@rematch/core'\nimport { count } from './count'\n\nexport interface RootModel extends Models<RootModel> {\n    count: typeof count\n}\n\nexport const models: RootModel = { count }\n","import { createModel } from '@rematch/core'\nimport { RootModel } from './'\n\nexport const count = createModel<RootModel>()({\n    state: 0, // initial state\n    reducers: {\n        // handle state changes with pure functions\n        increment(state, payload: number) {\n            return state + payload\n        },\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async incrementAsync(payload: number, state) {\n            console.log('This is current root state', state);\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            dispatch.count.increment(payload)\n        },\n    }),\n});\n","import { init, RematchDispatch, RematchRootState } from '@rematch/core'\nimport { models, RootModel } from './models'\n\nexport const store = init({\n  models,\n  redux: {\n    devtoolOptions: {\n      disabled: process.env.NODE_ENV === 'production',\n    },\n  },\n})\n\nexport type Store = typeof store\nexport type Dispatch = RematchDispatch<RootModel>\nexport type RootState = RematchRootState<RootModel>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoList_wrapper__1MWpK\",\"todo_wrapper\":\"TodoList_todo_wrapper__cFOkF\",\"todo_input\":\"TodoList_todo_input__1537b\",\"todo_item\":\"TodoList_todo_item__3tGk4\",\"todo_item_text\":\"TodoList_todo_item_text__242O0\",\"check_icon\":\"TodoList_check_icon__2glE9\",\"todo_item_checked\":\"TodoList_todo_item_checked__TGILq\",\"complete_all\":\"TodoList_complete_all__1q9QJ\",\"complete_all_btn\":\"TodoList_complete_all_btn__2alrj\"};"],"sourceRoot":""}